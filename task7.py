# 1. Даны значения величины заработной платы заемщиков банка (zp) и значения их
# поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Используя математические операции, посчитать коэффициенты линейной регрессии,
# приняв за X заработную плату (то есть, zp - признак), а за y - значения
# скорингового балла (то есть, ks - целевая переменная). Произвести расчет как
# с использованием intercept, так и без.
import numpy as np
from matplotlib import pyplot as plt

x1 = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110], dtype=np.float64)
y1 = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832], dtype=np.float64)

# коэффициент линейной регрессии с помощью формул для парной регрессии
b1 = (np.mean(x1 * y1) - np.mean(x1) * np.mean(y1)) / (np.mean(x1 ** 2) - np.mean(x1) ** 2)
b0 = np.mean(y1) - b1 * np.mean(x1)
print(f'модель регрессии решение 1: y = {b0} + {b1} * x')

plt.scatter(x1, y1)
plt.plot(x1, b1 * x1 + b0, color='red')
plt.xlabel('заработная плата заемщиков банка')
plt.ylabel('значения поведенческого кредитного скоринга')
plt.show()

# метод наименьших квадратов
x2 = x1.reshape(-1, 1)
ones = np.ones((x2.shape[0], 1))
x2 = np.hstack((ones, x2))
y2 = y1.reshape(-1, 1)

XTX = x2.T.dot(x2)
det = np.linalg.det(XTX)

XTX_inv = np.linalg.inv(XTX)
c = XTX_inv.dot(x2.T).dot(y2)
print(f'модель регрессии решение 2: y = {c[0][0]} + {c[1][0]} * x')
