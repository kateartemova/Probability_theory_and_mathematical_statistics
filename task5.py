import numpy as np

# 1. Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95,
# если выборочная средняя M = 80, а объем выборки n = 256.
s = 16
n = 256
m = 80
t = 1.9693
result_1 = (m - t * s / np.sqrt(n), m + t * s / np.sqrt(n))
print(f'result_1 доверительный интервал: {result_1}')

# 2. В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью,
# получены опытные данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей,
# оценить истинное значение величины X при помощи доверительного интервала, покрывающего это
# значение с доверительной вероятностью 0,95.

a = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
n = a.shape[0]
m = a.mean()
s = a.std(ddof=1)
t = 2.2622
result_2 = (m - t * s / np.sqrt(n), m + t * s / np.sqrt(n))
print(f'result_2 величина X может быть в диапазоне доверительного интервала: {result_2}')

# 3. Утверждается, что шарики для подшипников, изготовленные автоматическим станком, имеют средний диаметр 17 мм.
# Используя односторонний критерий с α=0,05, проверить эту гипотезу, если в выборке из n=100 шариков средний диаметр
# оказался равным 17.5 мм, а дисперсия известна и равна 4 мм.
# гипотеза H0: M(X) = 17.5
# α = 0.05
# D(X) = 4
# n = 100
# используем правилом двух сигм
result_3 = ((17 - 2 * 0.2), (17 + 2 * 0.2))
print(f'result_3 гипотеза не верна, доверительный интервал: {result_3}')

# 4. Продавец утверждает, что средний вес пачки печенья составляет 200 г.
# Из партии извлечена выборка из 10 пачек. Вес каждой пачки составляет:
# 202, 203, 199, 197, 195, 201, 200, 204, 194, 190.
# Известно, что их веса распределены нормально.
# Верно ли утверждение продавца, если учитывать, что доверительная вероятность равна 99%?
a = np.array([202, 203, 199, 197, 195, 201, 200, 204, 194, 190])
n = a.shape[0]
m = a.mean()
s = a.std(ddof=1)
t = 3.2498
result_4 = (m - t * s / np.sqrt(n), m + t * s / np.sqrt(n))
print(f'result_4 гипотеза верна, доверительный интервал: {result_4}')
